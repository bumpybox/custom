proc string deadlineMapIndividualFile( string $origFile, int $checkExistence )
{
	if( $origFile == "" )
	{
		return $origFile;
	}
	
	string $mappedFile = `dirmap -cd $origFile`;
	if( $mappedFile != $origFile && $checkExistence )
	{
		if( catchQuiet(` python( "import maya.app.general.fileTexturePathResolver" )` ) )
		{	
			print( "Unable to Import FileTexturePathResolver ignoring file existence check for pathmapping.\n" );
			return $mappedFile;
		}
		
		string $resolvedFiles[] = `python( "maya.app.general.fileTexturePathResolver.findAllFilesForPattern('" + $mappedFile + "', None)" )`;
		if( size( $resolvedFiles ) == 0 )
		{
			print( "Failed to Pathmap " + $origFile+ " no files exist that match the following mapped filename " + $mappedFile + "\n" );
			$mappedFile = $origFile;
		}
	}
	
	return $mappedFile;
}

//this function is used to remap all file paths of certain node type that include tokens. It is currently being used to fix an issue with the dirmap command.
global proc remapNodeFilePathsWithTokens( string $nodeType, string $pathAttr, int $checkExistence )
{
	string $fileNodes[] = `ls -type $nodeType`;
	
	for( $fileNode in $fileNodes )
	{
		string $fileAttr = $fileNode + "." + $pathAttr;
		string $curFile = `getAttr $fileAttr`;
		string $mappedFile = `deadlineMapIndividualFile $curFile $checkExistence`;
		if( $mappedFile != $curFile )
		{
			print( "Changing "+$fileAttr+ " from " + $curFile + " to " + $mappedFile+"\n" );
			setAttr -type "string" $fileAttr $mappedFile;
		}
	}
}

global proc mapOpenColorIOFile( int $enable )
{
	string $origConfigPath = "";

	// Ensure that the colorManagementPrefs command exists, last confirmed version is 2015 since docs aren't available before then
	if( catchQuiet( $origConfigPath = `colorManagementPrefs -q -configFilePath` ) )
	{
		return;
	}
	
	string $mappedConfigPath = `deadlineMapIndividualFile $origConfigPath false`;
	if( $mappedConfigPath != $origConfigPath )
	{
		print( "Changing OCIO Config File from " + $origConfigPath + " to " + $mappedConfigPath+"\n" );
		colorManagementPrefs -e -configFilePath $mappedConfigPath;
		colorManagementPrefs -e -cmConfigFileEnabled $enable;
	}

}

proc string evaluateXgenVariable(string $variable)
{
	// Computes the expanded XGen variable.

	// This does not work for description or object/module level variables.

	// xg.expandFilepath and its arguments are listed in the following header file:
	//
	// <MAYA_INSTALL_DIR>\plug-ins\xgen\include\XGen\XgExternalAPI.h
	//
	// NOTE: This is not documented in XGen's python API docs, but is exposed via the xgenm.XgExternalAPI module
	return python("xg.expandFilepath('" + $variable + "', '')");
}

proc string[] evaluateXGenVariables()
{
	// Computes an array of all XGen variables that need to be expanded for path mapping XGen attributes

	// This function evaluates the following XGen path variables:
	//     - ${HOME}
	//     - ${XGEN_ROOT}
	//     - ${XGEN_LOCATION}
	//     - ${PROJECT}

	// The function returns a one-dimensional array (MEL only supports 1D arrays) containing the mapping of the
	// variable to its evaluated value. Each odd-indexed entry is a string containing the unexpanded variable. Each
	// subsequent even-indexed entry contains the expanded value of the variable.

	// Example:
	//     > print(evaluateXGenVariables());
	//     {"${HOME}", "C:/Users/usiskin/Documents", "${XGEN_ROOT}", "C:/Assets/Maya/xgen", ... }

	// Array of XGen variables to be expanded
	string $xgenVariables[] = {
		"${HOME}",
		"${XGEN_ROOT}",
		"${XGEN_LOCATION}",
		"${PROJECT}"
	};

	// Resulting array that will contains interleaved xgen variables and their evaluated values
	string $xgenValues[] = {};

	// Temporary working variables
	string $xgenVariable;
	string $xgenValue;
	int $i = 0;

	// Evaluate all XGen variables
	for( $xgenVariable in $xgenVariables )
	{
		$xgenValue = evaluateXgenVariable( $xgenVariable );
		stringArrayInsertAtIndex($i++, $xgenValues, $xgenVariable);
		stringArrayInsertAtIndex($i++, $xgenValues, $xgenValue);
	}

	return $xgenValues;
}

proc mapXgenAttributes(string $palette, string $description, string $object, string $deadlineMappings[], string $xgenVarMap[] )
{
	int $i = 0;

	string $attributes[] = python("xg.attrs( \"" + $palette + "\", \"" + $description + "\", \"" + $object + "\" )");

	for ($attribute in $attributes)
	{
		string $attrVal = python("xg.getAttr( \"" + $attribute + "\",\"" + $palette + "\", \"" + $description + "\", \"" + $object + "\" )");

		// Replace slashes so that they are all forward slashes. Maya (and XGen) expect only forward slashes in paths,
		// regardless of platform.
		$attrVal = substituteAllString($attrVal, "\\", "/");

		// Make a copy of the attribute value that we will use to expand XGen variables and run path mapping on.
		string $newAttrVal = $attrVal;

		// Substitue the XGen collection variables with their evaluated values (if we were able to evaluate them)
		for( $i = 0; $i < size($xgenVarMap); $i += 2 )
		{
			string $xgenVariable = $xgenVarMap[$i];
			string $xgenValue = $xgenVarMap[$i + 1];
			if ( size( $xgenValue ) > 0 )
			{
				$newAttrVal = substituteAllString($newAttrVal, $xgenVariable, $xgenValue);
			}
		}

		// Run the path mapping string substitutions
		for( $i = 0; $i < size($deadlineMappings); $i += 2 )
		{
			 $newAttrVal = substituteAllString($newAttrVal, $deadlineMappings[ $i ], $deadlineMappings[ $i + 1 ] );
		}

		if ( $newAttrVal != $attrVal )
		{
			// Escape quotes in the attribute values so that they can be used in a python statement
			string $escapedNewAttrVal = substituteAllString($newAttrVal, "\"", "\\\"");

			string $command = "xg.setAttr( \"" + $attribute + "\",\"" + $escapedNewAttrVal + "\",\"" + $palette + "\", \"" + $description + "\", \"" + $object + "\" )";
			python($command);

			// Build full attribute path
			string $fullAttribute = $palette + ".";
			if( size($description) )
			{
				$fullAttribute += $description + ".";
			}
			if( size($object) )
			{
				$fullAttribute += $object + ".";
			}
			$fullAttribute += $attribute;

			print ( "Changing '" + $fullAttribute + "' from '" + $attrVal + "' To '" + $newAttrVal + "'\n" );
		}
	}
}

global proc mapXGen( string $deadlineMappings[] ) 
{
	catchQuiet ( python("import xgenm as xg") );
	string $palettes[];

	clear $palettes;
	catchQuiet ( $palettes = python("xg.palettes()") );
	if ( `size $palettes` == 0 )
		return;

	string $descriptions[];
	string $objects[];

	// Evaluate all XGen variables required for path mapping
	string $xgenVarMap[] = evaluateXGenVariables();

	for ( $palette in $palettes )
	{
		mapXgenAttributes($palette, "", "", $deadlineMappings, $xgenVarMap);
		clear $descriptions;
		$descriptions = python("xg.descriptions( \"" + $palette + "\" )");
		for ( $description in $descriptions )
		{
			mapXgenAttributes($palette, $description, "", $deadlineMappings, $xgenVarMap);
			clear $objects;
			$objects = python("xg.objects( \"" + $palette + "\", \"" + $description + "\" )");
			$objects = stringArrayCatenate( $objects, `python("xg.fxModules( \"" + $palette + "\", \"" + $description + "\" )")` );
			for ( $object in $objects )
			{
				mapXgenAttributes($palette, $description, $object, $deadlineMappings, $xgenVarMap);
			}
		}
	}
}